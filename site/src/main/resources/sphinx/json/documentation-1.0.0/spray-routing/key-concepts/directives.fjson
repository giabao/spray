{"body": "<div class=\"section\" id=\"directives\">\n<span id=\"id1\"></span><h1>Directives</h1>\n<p>&#8220;Directives&#8221; are small building blocks of which you can construct arbitrarily complex route structures.\nHere is a simple example of a route built from directives:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nn\">spray.routing._</span>\n<span class=\"k\">import</span> <span class=\"nn\">Directives._</span>\n\n<span class=\"k\">val</span> <span class=\"n\">route</span><span class=\"k\">:</span> <span class=\"kt\">Route</span> <span class=\"o\">=</span>\n  <span class=\"n\">path</span><span class=\"o\">(</span><span class=\"s\">&quot;order&quot;</span> <span class=\"o\">/</span> <span class=\"nc\">IntNumber</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">id</span> <span class=\"k\">=&gt;</span>\n    <span class=\"n\">get</span> <span class=\"o\">{</span>\n      <span class=\"n\">complete</span> <span class=\"o\">{</span>\n        <span class=\"s\">&quot;Received GET request for order &quot;</span> <span class=\"o\">+</span> <span class=\"n\">id</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">}</span> <span class=\"o\">~</span>\n    <span class=\"n\">put</span> <span class=\"o\">{</span>\n      <span class=\"n\">complete</span> <span class=\"o\">{</span>\n        <span class=\"s\">&quot;Received PUT request for order &quot;</span> <span class=\"o\">+</span> <span class=\"n\">id</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n</pre></div>\n</div>\n<p>The general anatomy of a directive is as follows:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"n\">name</span><span class=\"o\">(</span><span class=\"n\">arguments</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">extractions</span> <span class=\"k\">=&gt;</span>\n  <span class=\"o\">...</span> <span class=\"c1\">// inner Route</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n<p>It has a name, zero or more arguments and optionally an inner Route. Additionally directives can &#8220;extract&#8221; a number of\nvalues and make them available to their inner routes as function arguments. When seen &#8220;from the outside&#8221; a directive\nwith its inner Route form an expression of type <tt class=\"docutils literal\"><span class=\"pre\">Route</span></tt> (see the <a class=\"reference internal\" href=\"../routes/#routes\"><em>Routes</em></a> chapter for more details).</p>\n<div class=\"section\" id=\"what-directives-do\">\n<h2>What Directives do</h2>\n<p>A directive does one or more of the following:</p>\n<ul class=\"wide simple\">\n<li>Transform the incoming <tt class=\"docutils literal\"><span class=\"pre\">RequestContext</span></tt> before passing it on to its inner Route</li>\n<li>Filter the <tt class=\"docutils literal\"><span class=\"pre\">RequestContext</span></tt> according to some logic, i.e. only pass on certain requests and reject all others</li>\n<li>Extract values from the <tt class=\"docutils literal\"><span class=\"pre\">RequestContext</span></tt> and make them available to its inner Route as &#8220;extractions&#8221;</li>\n<li>Complete the request</li>\n</ul>\n<p>The first point deserves some more discussion. A <tt class=\"docutils literal\"><span class=\"pre\">RequestContext</span></tt> is the central object that is passed on through a\nroute structure and, potentially, in between actors. It&#8217;s immutable but light-weight and can therefore be copied\nquickly. When a directive receives a <tt class=\"docutils literal\"><span class=\"pre\">RequestContext</span></tt> instance from the outside it can decide to pass this instance on\nunchanged to its inner Route or it can create a copy of the <tt class=\"docutils literal\"><span class=\"pre\">RequestContext</span></tt> instance, with one or more changes, and\npass on this copy to its inner Route. Typically this is good for two things:</p>\n<ul class=\"simple\">\n<li>Transforming the <tt class=\"docutils literal\"><span class=\"pre\">HttpRequest</span></tt> instance</li>\n<li>&#8220;Hooking in&#8221; another response transformation function into the responder chain.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"the-responder-chain\">\n<span id=\"id2\"></span><h2>The Responder Chain</h2>\n<p>For understanding the &#8220;responder chain&#8221; it is helpful to look at what happens when the <tt class=\"docutils literal\"><span class=\"pre\">complete</span></tt> method of a\n<tt class=\"docutils literal\"><span class=\"pre\">RequestContext</span></tt> instance is called in the inner-most route of a route structure.</p>\n<p>Consider the following hypothetical route structure of three nested directives around a simple route:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"n\">foo</span> <span class=\"o\">{</span>\n  <span class=\"n\">bar</span> <span class=\"o\">{</span>\n    <span class=\"n\">baz</span> <span class=\"o\">{</span>\n      <span class=\"n\">ctx</span> <span class=\"k\">=&gt;</span> <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">complete</span><span class=\"o\">(</span><span class=\"s\">&quot;Hello&quot;</span><span class=\"o\">)</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n<p>Assume that <em>foo</em> and <em>baz</em> &#8220;hook in&#8221; response transformation logic whereas <em>bar</em> leaves the <tt class=\"docutils literal\"><span class=\"pre\">responder</span></tt> of the\n<tt class=\"docutils literal\"><span class=\"pre\">RequestContext</span></tt> it receives unchanged before passing it on to its inner Route. This is what happens when the\n<tt class=\"docutils literal\"><span class=\"pre\">complete(&quot;Hello&quot;)</span></tt> is called:</p>\n<ol class=\"arabic simple\">\n<li>The <tt class=\"docutils literal\"><span class=\"pre\">complete</span></tt> method creates an <tt class=\"docutils literal\"><span class=\"pre\">HttpResponse</span></tt> an sends it to responder of the <tt class=\"docutils literal\"><span class=\"pre\">RequestContext</span></tt>.</li>\n<li>The response transformation logic supplied by the <em>baz</em> directive runs and sends its result to the responder\nof the <tt class=\"docutils literal\"><span class=\"pre\">RequestContext</span></tt> the <em>baz</em> directive received.</li>\n<li>The response transformation logic supplied by the <em>foo</em> directive runs and sends its result to the responder\nof the <tt class=\"docutils literal\"><span class=\"pre\">RequestContext</span></tt> the <em>foo</em> directive received.</li>\n<li>The responder of the original <tt class=\"docutils literal\"><span class=\"pre\">RequestContext</span></tt>, which is the <em>sender</em> <tt class=\"docutils literal\"><span class=\"pre\">ActorRef</span></tt> of the <tt class=\"docutils literal\"><span class=\"pre\">HttpRequest</span></tt>,\nreceives the response and sends it out to the client.</li>\n</ol>\n<p>As you can see all response handling logic forms a logic chain that directives can choose to &#8220;hook into&#8221;.</p>\n</div>\n<div class=\"section\" id=\"composing-directives\">\n<span id=\"id3\"></span><h2>Composing Directives</h2>\n<p>As you have seen from the examples presented so far the &#8220;normal&#8221; way of composing directives is nesting. Let&#8217;s take\nanother look at the example from above:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">val</span> <span class=\"n\">route</span><span class=\"k\">:</span> <span class=\"kt\">Route</span> <span class=\"o\">=</span>\n  <span class=\"n\">path</span><span class=\"o\">(</span><span class=\"s\">&quot;order&quot;</span> <span class=\"o\">/</span> <span class=\"nc\">IntNumber</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">id</span> <span class=\"k\">=&gt;</span>\n    <span class=\"n\">get</span> <span class=\"o\">{</span>\n      <span class=\"n\">complete</span> <span class=\"o\">{</span>\n        <span class=\"s\">&quot;Received GET request for order &quot;</span> <span class=\"o\">+</span> <span class=\"n\">id</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">}</span> <span class=\"o\">~</span>\n    <span class=\"n\">put</span> <span class=\"o\">{</span>\n      <span class=\"n\">complete</span> <span class=\"o\">{</span>\n        <span class=\"s\">&quot;Received PUT request for order &quot;</span> <span class=\"o\">+</span> <span class=\"n\">id</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n</pre></div>\n</div>\n<p>Here the <tt class=\"docutils literal\"><span class=\"pre\">get</span></tt> and <tt class=\"docutils literal\"><span class=\"pre\">put</span></tt> directives are chained together with the <tt class=\"docutils literal\"><span class=\"pre\">~</span></tt> operator to form a higher-level route that\nserves as the inner Route of the <tt class=\"docutils literal\"><span class=\"pre\">path</span></tt> directive. To make this structure more explicit you could also write the whole\nthing like this:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">def</span> <span class=\"n\">innerRoute</span><span class=\"o\">(</span><span class=\"n\">id</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Route</span> <span class=\"o\">=</span>\n  <span class=\"n\">get</span> <span class=\"o\">{</span>\n    <span class=\"n\">complete</span> <span class=\"o\">{</span>\n      <span class=\"s\">&quot;Received GET request for order &quot;</span> <span class=\"o\">+</span> <span class=\"n\">id</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span> <span class=\"o\">~</span>\n  <span class=\"n\">put</span> <span class=\"o\">{</span>\n    <span class=\"n\">complete</span> <span class=\"o\">{</span>\n      <span class=\"s\">&quot;Received PUT request for order &quot;</span> <span class=\"o\">+</span> <span class=\"n\">id</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n\n<span class=\"k\">val</span> <span class=\"n\">route</span><span class=\"k\">:</span> <span class=\"kt\">Route</span> <span class=\"o\">=</span> <span class=\"n\">path</span><span class=\"o\">(</span><span class=\"s\">&quot;order&quot;</span> <span class=\"o\">/</span> <span class=\"nc\">IntNumber</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">id</span> <span class=\"k\">=&gt;</span> <span class=\"n\">innerRoute</span><span class=\"o\">(</span><span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</pre></div>\n</div>\n<p>What you can&#8217;t see from this snippet is that directives are not implemented as simple methods but rather as stand-alone\nobjects of type <tt class=\"docutils literal\"><span class=\"pre\">Directive</span></tt>. This gives you more flexibility when composing directives. For example you can\nalso use the <tt class=\"docutils literal\"><span class=\"pre\">|</span></tt> operator on directives. Here is yet another way to write the example:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">val</span> <span class=\"n\">route</span> <span class=\"k\">=</span>\n  <span class=\"n\">path</span><span class=\"o\">(</span><span class=\"s\">&quot;order&quot;</span> <span class=\"o\">/</span> <span class=\"nc\">IntNumber</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">id</span> <span class=\"k\">=&gt;</span>\n    <span class=\"o\">(</span><span class=\"n\">get</span> <span class=\"o\">|</span> <span class=\"n\">put</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">ctx</span> <span class=\"k\">=&gt;</span>\n      <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">complete</span><span class=\"o\">(</span><span class=\"s\">&quot;Received &quot;</span> <span class=\"o\">+</span> <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">method</span> <span class=\"o\">+</span> <span class=\"s\">&quot; request for order &quot;</span> <span class=\"o\">+</span> <span class=\"n\">id</span><span class=\"o\">)</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n</pre></div>\n</div>\n<p>If you have a larger route structure where the <tt class=\"docutils literal\"><span class=\"pre\">(get</span> <span class=\"pre\">|</span> <span class=\"pre\">put)</span></tt> snippet appears several times you could also factor it\nout like this:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">val</span> <span class=\"n\">getOrPut</span> <span class=\"k\">=</span> <span class=\"n\">get</span> <span class=\"o\">|</span> <span class=\"n\">put</span>\n<span class=\"k\">val</span> <span class=\"n\">route</span> <span class=\"k\">=</span>\n  <span class=\"n\">path</span><span class=\"o\">(</span><span class=\"s\">&quot;order&quot;</span> <span class=\"o\">/</span> <span class=\"nc\">IntNumber</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">id</span> <span class=\"k\">=&gt;</span>\n    <span class=\"n\">getOrPut</span> <span class=\"o\">{</span> <span class=\"n\">ctx</span> <span class=\"k\">=&gt;</span>\n      <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">complete</span><span class=\"o\">(</span><span class=\"s\">&quot;Received &quot;</span> <span class=\"o\">+</span> <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">method</span> <span class=\"o\">+</span> <span class=\"s\">&quot; request for order &quot;</span> <span class=\"o\">+</span> <span class=\"n\">id</span><span class=\"o\">)</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n</pre></div>\n</div>\n<p>As an alternative to nesting you can also use the <cite>&amp;</cite> operator:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">val</span> <span class=\"n\">getOrPut</span> <span class=\"k\">=</span> <span class=\"n\">get</span> <span class=\"o\">|</span> <span class=\"n\">put</span>\n<span class=\"k\">val</span> <span class=\"n\">route</span> <span class=\"k\">=</span>\n  <span class=\"o\">(</span><span class=\"n\">path</span><span class=\"o\">(</span><span class=\"s\">&quot;order&quot;</span> <span class=\"o\">/</span> <span class=\"nc\">IntNumber</span><span class=\"o\">)</span> <span class=\"o\">&amp;</span> <span class=\"n\">getOrPut</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">id</span> <span class=\"k\">=&gt;</span> <span class=\"n\">ctx</span> <span class=\"k\">=&gt;</span>\n    <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">complete</span><span class=\"o\">(</span><span class=\"s\">&quot;Received &quot;</span> <span class=\"o\">+</span> <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">method</span> <span class=\"o\">+</span> <span class=\"s\">&quot; request for order &quot;</span> <span class=\"o\">+</span> <span class=\"n\">id</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n</pre></div>\n</div>\n<p>And once again, you can factor things out if you want:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">val</span> <span class=\"n\">orderGetOrPut</span> <span class=\"k\">=</span> <span class=\"n\">path</span><span class=\"o\">(</span><span class=\"s\">&quot;order&quot;</span> <span class=\"o\">/</span> <span class=\"nc\">IntNumber</span><span class=\"o\">)</span> <span class=\"o\">&amp;</span> <span class=\"o\">(</span><span class=\"n\">get</span> <span class=\"o\">|</span> <span class=\"n\">put</span><span class=\"o\">)</span>\n<span class=\"k\">val</span> <span class=\"n\">route</span> <span class=\"k\">=</span>\n  <span class=\"n\">orderGetOrPut</span> <span class=\"o\">{</span> <span class=\"n\">id</span> <span class=\"k\">=&gt;</span> <span class=\"n\">ctx</span> <span class=\"k\">=&gt;</span>\n    <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">complete</span><span class=\"o\">(</span><span class=\"s\">&quot;Received &quot;</span> <span class=\"o\">+</span> <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">method</span> <span class=\"o\">+</span> <span class=\"s\">&quot; request for order &quot;</span> <span class=\"o\">+</span> <span class=\"n\">id</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n</pre></div>\n</div>\n<p>This type of combining directives with the <tt class=\"docutils literal\"><span class=\"pre\">|</span></tt> and <tt class=\"docutils literal\"><span class=\"pre\">&amp;</span></tt> operators as well as &#8220;saving&#8221; more complex directive\nconfigurations as a <tt class=\"docutils literal\"><span class=\"pre\">val</span></tt> works across the board, with all directives taking inner routes.</p>\n<p>There is one more &#8220;ugly&#8221; thing remaining in our snippet: we have to fall back to the lowest-level route definition,\ndirectly manipulating the <tt class=\"docutils literal\"><span class=\"pre\">RequestContext</span></tt>, in order to get to the request method. It&#8217;d be nicer if we could somehow\n&#8220;extract&#8221; the method name in a special directive, so that we can express our inner-most route with a simple\n<tt class=\"docutils literal\"><span class=\"pre\">complete</span></tt>. As it turns out this is easy with the <tt class=\"docutils literal\"><span class=\"pre\">extract</span></tt> directive:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">val</span> <span class=\"n\">orderGetOrPut</span> <span class=\"k\">=</span> <span class=\"n\">path</span><span class=\"o\">(</span><span class=\"s\">&quot;order&quot;</span> <span class=\"o\">/</span> <span class=\"nc\">IntNumber</span><span class=\"o\">)</span> <span class=\"o\">&amp;</span> <span class=\"o\">(</span><span class=\"n\">get</span> <span class=\"o\">|</span> <span class=\"n\">put</span><span class=\"o\">)</span>\n<span class=\"k\">val</span> <span class=\"n\">requestMethod</span> <span class=\"k\">=</span> <span class=\"n\">extract</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">method</span><span class=\"o\">)</span>\n<span class=\"k\">val</span> <span class=\"n\">route</span> <span class=\"k\">=</span>\n  <span class=\"n\">orderGetOrPut</span> <span class=\"o\">{</span> <span class=\"n\">id</span> <span class=\"k\">=&gt;</span>\n    <span class=\"n\">requestMethod</span> <span class=\"o\">{</span> <span class=\"n\">m</span> <span class=\"k\">=&gt;</span>\n      <span class=\"n\">complete</span><span class=\"o\">(</span><span class=\"s\">&quot;Received &quot;</span> <span class=\"o\">+</span> <span class=\"n\">m</span> <span class=\"o\">+</span> <span class=\"s\">&quot; request for order &quot;</span> <span class=\"o\">+</span> <span class=\"n\">id</span><span class=\"o\">)</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n</pre></div>\n</div>\n<p>Or differently:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">val</span> <span class=\"n\">orderGetOrPut</span> <span class=\"k\">=</span> <span class=\"n\">path</span><span class=\"o\">(</span><span class=\"s\">&quot;order&quot;</span> <span class=\"o\">/</span> <span class=\"nc\">IntNumber</span><span class=\"o\">)</span> <span class=\"o\">&amp;</span> <span class=\"o\">(</span><span class=\"n\">get</span> <span class=\"o\">|</span> <span class=\"n\">put</span><span class=\"o\">)</span>\n<span class=\"k\">val</span> <span class=\"n\">requestMethod</span> <span class=\"k\">=</span> <span class=\"n\">extract</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">method</span><span class=\"o\">)</span>\n<span class=\"k\">val</span> <span class=\"n\">route</span> <span class=\"k\">=</span>\n  <span class=\"o\">(</span><span class=\"n\">orderGetOrPut</span> <span class=\"o\">&amp;</span> <span class=\"n\">requestMethod</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"o\">(</span><span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span>\n    <span class=\"n\">complete</span><span class=\"o\">(</span><span class=\"s\">&quot;Received &quot;</span> <span class=\"o\">+</span> <span class=\"n\">m</span> <span class=\"o\">+</span> <span class=\"s\">&quot; request for order &quot;</span> <span class=\"o\">+</span> <span class=\"n\">id</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n</pre></div>\n</div>\n<p>Now, pushing the &#8220;factoring out&#8221; of directive configurations to its extreme, we end up with this:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">val</span> <span class=\"n\">orderGetOrPutMethod</span> <span class=\"k\">=</span>\n  <span class=\"n\">path</span><span class=\"o\">(</span><span class=\"s\">&quot;order&quot;</span> <span class=\"o\">/</span> <span class=\"nc\">IntNumber</span><span class=\"o\">)</span> <span class=\"o\">&amp;</span> <span class=\"o\">(</span><span class=\"n\">get</span> <span class=\"o\">|</span> <span class=\"n\">put</span><span class=\"o\">)</span> <span class=\"o\">&amp;</span> <span class=\"n\">extract</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">method</span><span class=\"o\">)</span>\n<span class=\"k\">val</span> <span class=\"n\">route</span> <span class=\"k\">=</span>\n  <span class=\"n\">orderGetOrPutMethod</span> <span class=\"o\">{</span> <span class=\"o\">(</span><span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span>\n    <span class=\"n\">complete</span><span class=\"o\">(</span><span class=\"s\">&quot;Received &quot;</span> <span class=\"o\">+</span> <span class=\"n\">m</span> <span class=\"o\">+</span> <span class=\"s\">&quot; request for order &quot;</span> <span class=\"o\">+</span> <span class=\"n\">id</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n</pre></div>\n</div>\n<p>Note that going this far with &#8220;compressing&#8221; several directives into a single one probably doesn&#8217;t result in the most\nreadable and therefore maintainable routing code. It might even be that the very first of this series of examples\nis in fact the most readable one.</p>\n<p>Still, the purpose of the exercise presented here is to show you how flexible directives can be and how you can\nuse their power to define your web service behavior at the level of abstraction that is right for <strong>your</strong> application.</p>\n</div>\n<div class=\"section\" id=\"type-safety\">\n<h2>Type Safety</h2>\n<p>When you combine directives with the <tt class=\"docutils literal\"><span class=\"pre\">|</span></tt> and <tt class=\"docutils literal\"><span class=\"pre\">&amp;</span></tt> operators <em>spray-routing</em> makes sure that all extractions work as\nexpected and logical constraints are enforced at compile-time.</p>\n<p>For example you cannot <tt class=\"docutils literal\"><span class=\"pre\">|</span></tt> a directive producing an extraction with one that doesn&#8217;t:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">val</span> <span class=\"n\">route</span> <span class=\"k\">=</span> <span class=\"n\">path</span><span class=\"o\">(</span><span class=\"s\">&quot;order&quot;</span> <span class=\"o\">/</span> <span class=\"nc\">IntNumber</span><span class=\"o\">)</span> <span class=\"o\">|</span> <span class=\"n\">get</span> <span class=\"c1\">// doesn&#39;t compile</span>\n</pre></div>\n</div>\n<p>Also the number of extractions and their types have to match up:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">val</span> <span class=\"n\">route</span> <span class=\"k\">=</span> <span class=\"n\">path</span><span class=\"o\">(</span><span class=\"s\">&quot;order&quot;</span> <span class=\"o\">/</span> <span class=\"nc\">IntNumber</span><span class=\"o\">)</span> <span class=\"o\">|</span> <span class=\"n\">path</span><span class=\"o\">(</span><span class=\"s\">&quot;order&quot;</span> <span class=\"o\">/</span> <span class=\"nc\">DoubleNumber</span><span class=\"o\">)</span>   <span class=\"c1\">// doesn&#39;t compile</span>\n<span class=\"k\">val</span> <span class=\"n\">route</span> <span class=\"k\">=</span> <span class=\"n\">path</span><span class=\"o\">(</span><span class=\"s\">&quot;order&quot;</span> <span class=\"o\">/</span> <span class=\"nc\">IntNumber</span><span class=\"o\">)</span> <span class=\"o\">|</span> <span class=\"n\">parameter</span><span class=\"o\">(</span><span class=\"-Symbol\">&#39;order</span><span class=\"o\">.</span><span class=\"n\">as</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">])</span>      <span class=\"c1\">// ok</span>\n</pre></div>\n</div>\n<p>When you combine directives producing extractions with the <tt class=\"docutils literal\"><span class=\"pre\">&amp;</span></tt> operator all extractions will be properly gathered up:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">val</span> <span class=\"n\">order</span> <span class=\"k\">=</span> <span class=\"n\">path</span><span class=\"o\">(</span><span class=\"s\">&quot;order&quot;</span> <span class=\"o\">/</span> <span class=\"nc\">IntNumber</span><span class=\"o\">)</span> <span class=\"o\">&amp;</span> <span class=\"n\">parameters</span><span class=\"o\">(</span><span class=\"-Symbol\">&#39;oem</span><span class=\"o\">,</span> <span class=\"-Symbol\">&#39;expired</span> <span class=\"o\">?)</span>\n<span class=\"k\">val</span> <span class=\"n\">route</span> <span class=\"k\">=</span>\n  <span class=\"n\">order</span> <span class=\"o\">{</span> <span class=\"o\">(</span><span class=\"n\">orderId</span><span class=\"o\">,</span> <span class=\"n\">oem</span><span class=\"o\">,</span> <span class=\"n\">expired</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span>\n    <span class=\"o\">...</span>\n  <span class=\"o\">}</span>\n</pre></div>\n</div>\n<p>Directives offer a great way of constructing your web service logic from small building blocks in a plug and play\nfashion while maintaining DRYness and full type-safety. If the large range of <a class=\"reference internal\" href=\"../../predefined-directives-alphabetically/#predefined-directives\"><em>Predefined Directives (alphabetically)</em></a> does not\nfully satisfy your needs you can also very easily create <a class=\"reference internal\" href=\"../../advanced-topics/custom-directives/#custom-directives\"><em>Custom Directives</em></a>.</p>\n</div>\n</div>\n", "display_toc": true, "title": "Directives", "sourcename": "", "customsidebar": null, "current_page_name": "documentation/spray-routing/key-concepts/directives", "next": {"link": "../rejections/", "title": "Rejections"}, "rellinks": [["genindex", "General Index", "I", "index"], ["documentation/spray-routing/key-concepts/rejections", "Rejections", "N", "next"], ["documentation/spray-routing/key-concepts/routes", "Routes", "P", "previous"]], "meta": {}, "parents": [{"link": "../../../", "title": "Documentation"}, {"link": "../../", "title": "spray-routing"}, {"link": "../", "title": "Key Concepts"}], "sidebars": null, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Directives</a><ul>\n<li><a class=\"reference internal\" href=\"#what-directives-do\">What Directives do</a></li>\n<li><a class=\"reference internal\" href=\"#the-responder-chain\">The Responder Chain</a></li>\n<li><a class=\"reference internal\" href=\"#composing-directives\">Composing Directives</a></li>\n<li><a class=\"reference internal\" href=\"#type-safety\">Type Safety</a></li>\n</ul>\n</li>\n</ul>\n", "prev": {"link": "../routes/", "title": "Routes"}, "metatags": ""}