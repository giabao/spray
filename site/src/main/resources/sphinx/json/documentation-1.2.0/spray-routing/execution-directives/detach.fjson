{"body": "<div class=\"section\" id=\"detach\">\n<span id=\"id1\"></span><h1>detach</h1>\n<p>Executes the inner route inside a future.</p>\n<div class=\"section\" id=\"signature\">\n<h2>Signature</h2>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">def</span> <span class=\"n\">detach</span><span class=\"o\">()(</span><span class=\"k\">implicit</span> <span class=\"n\">ec</span><span class=\"k\">:</span> <span class=\"kt\">ExecutionContext</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Directive0</span>\n<span class=\"k\">def</span> <span class=\"n\">detach</span><span class=\"o\">()(</span><span class=\"k\">implicit</span> <span class=\"n\">refFactory</span><span class=\"k\">:</span> <span class=\"kt\">ActorRefFactory</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Directive0</span>\n<span class=\"k\">def</span> <span class=\"n\">detach</span><span class=\"o\">(</span><span class=\"n\">ec</span><span class=\"k\">:</span> <span class=\"kt\">ExecutionContext</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Directive0</span>\n</pre></div>\n</div>\n<p>The signature shown is simplified, the real signature uses magnets. <a class=\"footnote-reference\" href=\"#id3\" id=\"id2\">[1]</a></p>\n<table class=\"docutils footnote\" frame=\"void\" id=\"id3\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id2\">[1]</a></td><td>See <a class=\"reference external\" href=\"/blog/2012-12-13-the-magnet-pattern/\">The Magnet Pattern</a> for an explanation of magnet-based overloading.</td></tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"description\">\n<h2>Description</h2>\n<p>This directive needs either an implicit <tt class=\"docutils literal\"><span class=\"pre\">ExecutionContext</span></tt> (<tt class=\"docutils literal\"><span class=\"pre\">detach()</span></tt>) or an explicit one (<tt class=\"docutils literal\"><span class=\"pre\">detach(ec)</span></tt>).</p>\n<div class=\"admonition caution\">\n<p class=\"first admonition-title\">Caution</p>\n<p>It is a common mistake to access actor state from code run inside a future that is created inside an actor by\naccidentally accessing instance methods or variables of the actor that are available in the scope. This also applies\nto the <tt class=\"docutils literal\"><span class=\"pre\">detach</span></tt> directive if a route is run inside an actor which is the usual case.\nMake sure not to access any actor state from inside the <tt class=\"docutils literal\"><span class=\"pre\">detach</span></tt> block directly or indirectly.</p>\n<p class=\"last\">A lesser known fact is that the current semantics of executing <a class=\"reference internal\" href=\"../../key-concepts/routes/#the-routing-tree\"><em>The Routing Tree</em></a> encompasses that\nevery route that rejects a request also runs the alternative routes chained with <tt class=\"docutils literal\"><span class=\"pre\">~</span></tt>. This means that when a route\nis rejected out of a <tt class=\"docutils literal\"><span class=\"pre\">detach</span></tt> block, also all the alternatives tried afterwards are then run out of the future\noriginally created for running the <tt class=\"docutils literal\"><span class=\"pre\">detach</span></tt> block and not any more from the original (actor) context\nstarting the request processing. To avoid that use <tt class=\"docutils literal\"><span class=\"pre\">detach</span></tt> only at places inside the routing tree\nwhere no rejections are expected.</p>\n</div>\n</div>\n<div class=\"section\" id=\"example\">\n<h2>Example</h2>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">val</span> <span class=\"n\">route</span> <span class=\"k\">=</span>\n  <span class=\"n\">detach</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"n\">complete</span><span class=\"o\">(</span><span class=\"s\">&quot;Result&quot;</span><span class=\"o\">)</span> <span class=\"c1\">// route executed in future</span>\n  <span class=\"o\">}</span>\n<span class=\"nc\">Get</span><span class=\"o\">(</span><span class=\"s\">&quot;/&quot;</span><span class=\"o\">)</span> <span class=\"o\">~&gt;</span> <span class=\"n\">route</span> <span class=\"o\">~&gt;</span> <span class=\"n\">check</span> <span class=\"o\">{</span>\n  <span class=\"n\">responseAs</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">]</span> <span class=\"o\">===</span> <span class=\"s\">&quot;Result&quot;</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n<p>This example demonstrates the effect of the note above:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"c1\">/// / a custom directive to extract the id of the current thread</span>\n<span class=\"k\">def</span> <span class=\"n\">currentThreadId</span><span class=\"k\">:</span> <span class=\"kt\">Directive1</span><span class=\"o\">[</span><span class=\"kt\">Long</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"n\">extract</span><span class=\"o\">(</span><span class=\"k\">_</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"n\">currentThread</span><span class=\"o\">().</span><span class=\"n\">getId</span><span class=\"o\">)</span>\n<span class=\"k\">val</span> <span class=\"n\">route</span> <span class=\"k\">=</span>\n  <span class=\"n\">currentThreadId</span> <span class=\"o\">{</span> <span class=\"n\">originThread</span> <span class=\"k\">=&gt;</span>\n    <span class=\"n\">path</span><span class=\"o\">(</span><span class=\"s\">&quot;rejectDetached&quot;</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"n\">detach</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"n\">reject</span><span class=\"o\">()</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">}</span> <span class=\"o\">~</span>\n    <span class=\"n\">path</span><span class=\"o\">(</span><span class=\"s\">&quot;reject&quot;</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"n\">reject</span><span class=\"o\">()</span>\n    <span class=\"o\">}</span> <span class=\"o\">~</span>\n    <span class=\"n\">currentThreadId</span> <span class=\"o\">{</span> <span class=\"n\">alternativeThread</span> <span class=\"k\">=&gt;</span>\n      <span class=\"n\">complete</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"s\">&quot;$originThread,$alternativeThread&quot;</span><span class=\"o\">)</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n\n<span class=\"nc\">Get</span><span class=\"o\">(</span><span class=\"s\">&quot;/reject&quot;</span><span class=\"o\">)</span> <span class=\"o\">~&gt;</span> <span class=\"n\">route</span> <span class=\"o\">~&gt;</span> <span class=\"n\">check</span> <span class=\"o\">{</span>\n  <span class=\"k\">val</span> <span class=\"nc\">Array</span><span class=\"o\">(</span><span class=\"n\">original</span><span class=\"o\">,</span> <span class=\"n\">alternative</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"n\">responseAs</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">].</span><span class=\"n\">split</span><span class=\"o\">(</span><span class=\"s\">&quot;,&quot;</span><span class=\"o\">)</span>\n  <span class=\"n\">original</span> <span class=\"o\">===</span> <span class=\"n\">alternative</span>\n<span class=\"o\">}</span>\n<span class=\"nc\">Get</span><span class=\"o\">(</span><span class=\"s\">&quot;/rejectDetached&quot;</span><span class=\"o\">)</span> <span class=\"o\">~&gt;</span> <span class=\"n\">route</span> <span class=\"o\">~&gt;</span> <span class=\"n\">check</span> <span class=\"o\">{</span>\n  <span class=\"k\">val</span> <span class=\"nc\">Array</span><span class=\"o\">(</span><span class=\"n\">original</span><span class=\"o\">,</span> <span class=\"n\">alternative</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"n\">responseAs</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">].</span><span class=\"n\">split</span><span class=\"o\">(</span><span class=\"s\">&quot;,&quot;</span><span class=\"o\">)</span>\n  <span class=\"n\">original</span> <span class=\"o\">!==</span> <span class=\"n\">alternative</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n</div>\n</div>\n", "display_toc": true, "title": "detach", "sourcename": "", "customsidebar": null, "current_page_name": "documentation/spray-routing/execution-directives/detach", "next": {"link": "../dynamic/", "title": "dynamic"}, "rellinks": [["genindex", "General Index", "I", "index"], ["documentation/spray-routing/execution-directives/dynamic", "dynamic", "N", "next"], ["documentation/spray-routing/execution-directives/index", "ExecutionDirectives", "P", "previous"]], "meta": {}, "parents": [{"link": "../../../", "title": "Documentation"}, {"link": "../../", "title": "spray-routing"}, {"link": "../../predefined-directives-by-trait/", "title": "Predefined Directives (by trait)"}, {"link": "../", "title": "ExecutionDirectives"}], "sidebars": null, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">detach</a><ul>\n<li><a class=\"reference internal\" href=\"#signature\">Signature</a></li>\n<li><a class=\"reference internal\" href=\"#description\">Description</a></li>\n<li><a class=\"reference internal\" href=\"#example\">Example</a></li>\n</ul>\n</li>\n</ul>\n", "prev": {"link": "../", "title": "ExecutionDirectives"}, "metatags": ""}