{"body": "<div class=\"section\" id=\"rejections\">\n<span id=\"id1\"></span><h1>Rejections</h1>\n<p>In the chapter about constructing <a class=\"reference internal\" href=\"../routes/#routes\"><em>Routes</em></a> the <tt class=\"docutils literal\"><span class=\"pre\">~</span></tt> operator was introduced, which connects two routes in a way\nthat allows a second route to get a go at a request if the first route &#8220;rejected&#8221; it. The concept of &#8220;rejections&#8221; is\nused by <em>spray-routing</em> for maintaining a more functional overall architecture and in order to be able to properly\nhandle all kinds of error scenarios.</p>\n<p>When a filtering directive, like the <a class=\"reference internal\" href=\"../../method-directives/get/#get\"><em>get</em></a> directive, cannot let the request pass through to its inner Route because\nthe filter condition is not satisfied (e.g. because the incoming request is not a GET request) the directive doesn&#8217;t\nimmediately complete the request with an error response. Doing so would make it impossible for other routes chained in\nafter the failing filter to get a chance to handle the request.\nRather, failing filters &#8220;reject&#8221; the request in the same way as by explicitly calling <tt class=\"docutils literal\"><span class=\"pre\">requestContext.reject(...)</span></tt>.</p>\n<p>After having been rejected by a route the request will continue to flow through the routing structure and possibly find\nanother route that can complete it. If there are more rejections all of them will be picked up and collected.</p>\n<p>If the request cannot be completed by (a branch of) the route structure an enclosing <a class=\"reference internal\" href=\"../../execution-directives/handleRejections/#handlerejections\"><em>handleRejections</em></a> directive\ncan be used to convert a set of rejections into an <tt class=\"docutils literal\"><span class=\"pre\">HttpResponse</span></tt> (which, in most cases, will be an error response).\n<a class=\"reference internal\" href=\"../big-picture/#runroute\"><em>The runRoute Wrapper</em></a> defined by the <a class=\"reference internal\" href=\"../big-picture/#httpservice\"><em>The HttpService</em></a> trait internally wraps its argument route with the\n<a class=\"reference internal\" href=\"../../execution-directives/handleRejections/#handlerejections\"><em>handleRejections</em></a> directive in order to &#8220;catch&#8221; and handle any rejection.</p>\n<div class=\"section\" id=\"predefined-rejections\">\n<h2>Predefined Rejections</h2>\n<p>A rejection encapsulates a specific reason why a Route was not able to handle a request. It is modeled as an object of\ntype <tt class=\"docutils literal\"><span class=\"pre\">Rejection</span></tt>. <em>spray-routing</em> comes with a set of <a class=\"reference external\" href=\"https://github.com/spray/spray/blob/release/1.2/spray-routing/src/main/scala/spray/routing/Rejection.scala\">predefined rejections</a>, which are used by various\n<a class=\"reference internal\" href=\"../../predefined-directives-alphabetically/#predefined-directives\"><em>predefined directives</em></a>.</p>\n<p>Rejections are gathered up over the course of a Route evaluation and finally converted to <tt class=\"docutils literal\"><span class=\"pre\">HttpResponse</span></tt> replies by\nthe <a class=\"reference internal\" href=\"../../execution-directives/handleRejections/#handlerejections\"><em>handleRejections</em></a> directive if there was no way for the request to be completed.</p>\n</div>\n<div class=\"section\" id=\"rejectionhandler\">\n<span id=\"id3\"></span><h2>RejectionHandler</h2>\n<p>The <a class=\"reference internal\" href=\"../../execution-directives/handleRejections/#handlerejections\"><em>handleRejections</em></a> directive delegates the actual job of converting a list of rejections to its argument, a\n<a class=\"reference external\" href=\"https://github.com/spray/spray/blob/release/1.2/spray-routing/src/main/scala/spray/routing/RejectionHandler.scala\">RejectionHandler</a>, which is defined like this:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">trait</span> <span class=\"nc\">RejectionHandler</span> <span class=\"k\">extends</span> <span class=\"nc\">PartialFunction</span><span class=\"o\">[</span><span class=\"kt\">List</span><span class=\"o\">[</span><span class=\"kt\">Rejection</span><span class=\"o\">]</span>, <span class=\"kt\">Route</span><span class=\"o\">]</span>\n</pre></div>\n</div>\n<p>Since a <tt class=\"docutils literal\"><span class=\"pre\">RejectionHandler</span></tt> is a partial function it can choose, which rejections it would like to handle and\nwhich not. Unhandled rejections will simply continue to flow through the route structure. The top-most\n<tt class=\"docutils literal\"><span class=\"pre\">RejectionHandler</span></tt> applied by <a class=\"reference internal\" href=\"../big-picture/#runroute\"><em>The runRoute Wrapper</em></a> will handle <em>all</em> rejections that reach it.</p>\n<p>So, if you&#8217;d like to customize the way certain rejections are handled simply bring a custom <tt class=\"docutils literal\"><span class=\"pre\">RejectionHandler</span></tt> into\nimplicit scope of <a class=\"reference internal\" href=\"../big-picture/#runroute\"><em>The runRoute Wrapper</em></a> or pass it to an explicit <a class=\"reference internal\" href=\"../../execution-directives/handleRejections/#handlerejections\"><em>handleRejections</em></a> directive that you\nhave put somewhere into your route structure.</p>\n<p>Here is an example:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nn\">spray.routing._</span>\n<span class=\"k\">import</span> <span class=\"nn\">spray.http._</span>\n<span class=\"k\">import</span> <span class=\"nn\">StatusCodes._</span>\n<span class=\"k\">import</span> <span class=\"nn\">Directives._</span>\n\n<span class=\"k\">implicit</span> <span class=\"k\">val</span> <span class=\"n\">myRejectionHandler</span> <span class=\"k\">=</span> <span class=\"nc\">RejectionHandler</span> <span class=\"o\">{</span>\n  <span class=\"k\">case</span> <span class=\"nc\">MissingCookieRejection</span><span class=\"o\">(</span><span class=\"n\">cookieName</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"k\">_</span> <span class=\"k\">=&gt;</span>\n    <span class=\"n\">complete</span><span class=\"o\">(</span><span class=\"nc\">BadRequest</span><span class=\"o\">,</span> <span class=\"s\">&quot;No cookies, no service!!!&quot;</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyService</span> <span class=\"k\">extends</span> <span class=\"nc\">HttpServiceActor</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">receive</span> <span class=\"k\">=</span> <span class=\"n\">runRoute</span> <span class=\"o\">{</span>\n    <span class=\"n\">`&lt;my-route-definition&gt;`</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"rejection-cancellation\">\n<h2>Rejection Cancellation</h2>\n<p>As you can see from its definition above the <tt class=\"docutils literal\"><span class=\"pre\">RejectionHandler</span></tt> handles not single rejections but a whole list of\nthem. This is because some route structure produce several &#8220;reasons&#8221; why a request could not be handled.</p>\n<p>Take this route structure for example:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nn\">spray.httpx.encoding._</span>\n\n<span class=\"k\">val</span> <span class=\"n\">route</span> <span class=\"k\">=</span>\n  <span class=\"n\">path</span><span class=\"o\">(</span><span class=\"s\">&quot;order&quot;</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">get</span> <span class=\"o\">{</span>\n      <span class=\"n\">complete</span><span class=\"o\">(</span><span class=\"s\">&quot;Received GET&quot;</span><span class=\"o\">)</span>\n    <span class=\"o\">}</span> <span class=\"o\">~</span>\n    <span class=\"n\">post</span> <span class=\"o\">{</span>\n      <span class=\"n\">decodeRequest</span><span class=\"o\">(</span><span class=\"nc\">Gzip</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">complete</span><span class=\"o\">(</span><span class=\"s\">&quot;Received POST&quot;</span><span class=\"o\">)</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n</pre></div>\n</div>\n<p>For uncompressed POST requests this route structure could yield two rejections:</p>\n<ul class=\"simple\">\n<li>a <tt class=\"docutils literal\"><span class=\"pre\">MethodRejection</span></tt> produced by the <a class=\"reference internal\" href=\"../../method-directives/get/#get\"><em>get</em></a> directive (which rejected because the request is not a GET request)</li>\n<li>an <tt class=\"docutils literal\"><span class=\"pre\">UnsupportedRequestEncodingRejection</span></tt> produced by the <a class=\"reference internal\" href=\"../../encoding-directives/decodeRequest/#decoderequest\"><em>decodeRequest</em></a> directive (which only accepts\ngzip-compressed requests)</li>\n</ul>\n<p>In reality the route even generates one more rejection, a <tt class=\"docutils literal\"><span class=\"pre\">TransformationRejection</span></tt> produced by the <a class=\"reference internal\" href=\"../../method-directives/post/#post\"><em>post</em></a>\ndirective. It &#8220;cancels&#8221; all other potentially existing <em>MethodRejections</em>, since they are invalid after the\n<a class=\"reference internal\" href=\"../../method-directives/post/#post\"><em>post</em></a> directive allowed the request to pass (after all, the route structure <em>can</em> deal with POST requests).\nThese types of rejection cancellations are resolved <em>before</em> a <tt class=\"docutils literal\"><span class=\"pre\">RejectionHandler</span></tt> sees the rejection list.\nSo, for the example above the <tt class=\"docutils literal\"><span class=\"pre\">RejectionHandler</span></tt> will be presented with only a single-element rejection list,\ncontaining nothing but the <tt class=\"docutils literal\"><span class=\"pre\">UnsupportedRequestEncodingRejection</span></tt>.</p>\n</div>\n<div class=\"section\" id=\"empty-rejections\">\n<span id=\"id5\"></span><h2>Empty Rejections</h2>\n<p>Since rejections are passed around in lists you might ask yourself what the semantics of an empty rejection list are.\nIn fact, empty rejection lists have well defined semantics. They signal that a request was not handled because the\nrespective resource could not be found. <em>spray-routing</em> reserves the special status of &#8220;empty rejection&#8221; to this most\ncommon failure a service is likely to produce.</p>\n<p>So, for example, if the <a class=\"reference internal\" href=\"../../path-directives/path/#path\"><em>path</em></a> directive rejects a request, it does so with an empty rejection list. The\n<a class=\"reference internal\" href=\"../../host-directives/host/#host\"><em>host</em></a> directive behaves in the same way.</p>\n</div>\n</div>\n", "display_toc": true, "title": "Rejections", "sourcename": "", "customsidebar": null, "current_page_name": "documentation/spray-routing/key-concepts/rejections", "next": {"link": "../exception-handling/", "title": "Exception Handling"}, "rellinks": [["genindex", "General Index", "I", "index"], ["documentation/spray-routing/key-concepts/exception-handling", "Exception Handling", "N", "next"], ["documentation/spray-routing/key-concepts/directives", "Directives", "P", "previous"]], "meta": {}, "parents": [{"link": "../../../", "title": "Documentation"}, {"link": "../../", "title": "spray-routing"}, {"link": "../", "title": "Key Concepts"}], "sidebars": null, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Rejections</a><ul>\n<li><a class=\"reference internal\" href=\"#predefined-rejections\">Predefined Rejections</a></li>\n<li><a class=\"reference internal\" href=\"#rejectionhandler\">RejectionHandler</a></li>\n<li><a class=\"reference internal\" href=\"#rejection-cancellation\">Rejection Cancellation</a></li>\n<li><a class=\"reference internal\" href=\"#empty-rejections\">Empty Rejections</a></li>\n</ul>\n</li>\n</ul>\n", "prev": {"link": "../directives/", "title": "Directives"}, "metatags": ""}