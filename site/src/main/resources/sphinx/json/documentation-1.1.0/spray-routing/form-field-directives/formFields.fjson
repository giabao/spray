{"body": "<div class=\"section\" id=\"formfields\">\n<span id=\"id1\"></span><h1>formFields</h1>\n<p>Extracts fields from POST requests generated by HTML forms.</p>\n<div class=\"section\" id=\"signature\">\n<h2>Signature</h2>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">def</span> <span class=\"n\">formFields</span><span class=\"o\">(</span><span class=\"n\">field</span><span class=\"k\">:</span> <span class=\"kt\">&lt;FieldDef</span><span class=\"o\">[</span><span class=\"kt\">T</span><span class=\"o\">]&gt;)</span><span class=\"k\">:</span> <span class=\"kt\">Directive1</span><span class=\"o\">[</span><span class=\"kt\">T</span><span class=\"o\">]</span>\n<span class=\"k\">def</span> <span class=\"n\">formFields</span><span class=\"o\">(</span><span class=\"n\">fields</span><span class=\"k\">:</span> <span class=\"kt\">&lt;FieldDef</span><span class=\"o\">[</span><span class=\"kt\">T_i</span><span class=\"o\">]&gt;*)</span><span class=\"k\">:</span> <span class=\"kt\">Directive</span><span class=\"o\">[</span><span class=\"kt\">T_0</span> <span class=\"kt\">::</span> <span class=\"kt\">...</span> <span class=\"kt\">T_i</span> <span class=\"kt\">...</span> <span class=\"kt\">::</span> <span class=\"kt\">HNil</span><span class=\"o\">]</span>\n<span class=\"k\">def</span> <span class=\"n\">formFields</span><span class=\"o\">(</span><span class=\"n\">fields</span><span class=\"k\">:</span> <span class=\"kt\">&lt;FieldDef</span><span class=\"o\">[</span><span class=\"kt\">T_0</span><span class=\"o\">]&gt;</span> <span class=\"o\">::</span> <span class=\"o\">...</span> <span class=\"o\">&lt;</span><span class=\"nc\">FieldDef</span><span class=\"o\">[</span><span class=\"kt\">T_i</span><span class=\"o\">]&gt;</span> <span class=\"o\">...</span> <span class=\"o\">::</span> <span class=\"nc\">HNil</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Directive</span><span class=\"o\">[</span><span class=\"kt\">T_0</span> <span class=\"kt\">::</span> <span class=\"kt\">...</span> <span class=\"kt\">T_i</span> <span class=\"kt\">...</span> <span class=\"kt\">::</span> <span class=\"kt\">HNil</span><span class=\"o\">]</span>\n</pre></div>\n</div>\n<p>The signature shown is simplified and written in pseudo-syntax, the real signature uses magnets. <a class=\"footnote-reference\" href=\"#id3\" id=\"id2\">[1]</a> The type\n<tt class=\"docutils literal\"><span class=\"pre\">&lt;FieldDef&gt;</span></tt> doesn&#8217;t really exist but consists of the syntactic variants as shown in the description and the examples.</p>\n<table class=\"docutils footnote\" frame=\"void\" id=\"id3\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id2\">[1]</a></td><td>See <a class=\"reference external\" href=\"/blog/2012-12-13-the-magnet-pattern/\">The Magnet Pattern</a> for an explanation of magnet-based overloading.</td></tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"description\">\n<h2>Description</h2>\n<p>Form fields can be either extracted as a String or can be converted to another type. The parameter name\ncan be supplied either as a String or as a Symbol. Form field extraction can be modified to mark a field\nas required or optional or to filter requests where a form field has a certain value:</p>\n<dl class=\"docutils\">\n<dt><tt class=\"docutils literal\"><span class=\"pre\">&quot;color&quot;</span></tt></dt>\n<dd>extract value of field &#8220;color&#8221; as <tt class=\"docutils literal\"><span class=\"pre\">String</span></tt></dd>\n<dt><tt class=\"docutils literal\"><span class=\"pre\">&quot;color&quot;.?</span></tt></dt>\n<dd>extract optional value of field &#8220;color&#8221; as <tt class=\"docutils literal\"><span class=\"pre\">Option[String]</span></tt></dd>\n<dt><tt class=\"docutils literal\"><span class=\"pre\">&quot;color&quot;</span> <span class=\"pre\">?</span> <span class=\"pre\">&quot;red&quot;</span></tt></dt>\n<dd>extract optional value of field &#8220;color&#8221; as <tt class=\"docutils literal\"><span class=\"pre\">String</span></tt> with default value <tt class=\"docutils literal\"><span class=\"pre\">&quot;red&quot;</span></tt></dd>\n<dt><tt class=\"docutils literal\"><span class=\"pre\">&quot;color&quot;</span> <span class=\"pre\">!</span> <span class=\"pre\">&quot;blue&quot;</span></tt></dt>\n<dd>require value of field &#8220;color&#8221; to be <tt class=\"docutils literal\"><span class=\"pre\">&quot;blue&quot;</span></tt> and extract nothing</dd>\n<dt><tt class=\"docutils literal\"><span class=\"pre\">&quot;amount&quot;.as[Int]</span></tt></dt>\n<dd>extract value of field &#8220;amount&#8221; as <tt class=\"docutils literal\"><span class=\"pre\">Int</span></tt>, you need a matching <tt class=\"docutils literal\"><span class=\"pre\">Deserializer</span></tt> in scope for that to work\n(see also <a class=\"reference internal\" href=\"../../../spray-httpx/unmarshalling/#unmarshalling\"><em>Unmarshalling</em></a>)</dd>\n<dt><tt class=\"docutils literal\"><span class=\"pre\">&quot;amount&quot;.as(deserializer)</span></tt></dt>\n<dd>extract value of field &#8220;amount&#8221; with an explicit <tt class=\"docutils literal\"><span class=\"pre\">Deserializer</span></tt></dd>\n</dl>\n<p>You can use <a class=\"reference internal\" href=\"../../advanced-topics/case-class-extraction/#case-class-extraction\"><em>Case Class Extraction</em></a> to group several extracted values together into a case-class\ninstance.</p>\n<p>Requests missing a required field or field value will be rejected with an appropriate rejection.</p>\n<p>There&#8217;s also a singular version, <tt class=\"docutils literal\"><span class=\"pre\">formField</span></tt>. Query parameters can be handled in a similar way, see <tt class=\"docutils literal\"><span class=\"pre\">parameters</span></tt>. If\nyou want unified handling for both query parameters and form fields, see <tt class=\"docutils literal\"><span class=\"pre\">anyParams</span></tt>.</p>\n</div>\n<div class=\"section\" id=\"unmarshalling\">\n<h2>Unmarshalling</h2>\n<p>Data POSTed from <a class=\"reference external\" href=\"http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4\">HTML forms</a> is either of type <tt class=\"docutils literal\"><span class=\"pre\">application/x-www-form-urlencoded</span></tt> or of type\n<tt class=\"docutils literal\"><span class=\"pre\">multipart/form-data</span></tt>. The value of an url-encoded field is a <tt class=\"docutils literal\"><span class=\"pre\">String</span></tt> while the value of a\n<tt class=\"docutils literal\"><span class=\"pre\">multipart/form-data</span></tt>-encoded field is a &#8220;body part&#8221; containing an entity. This means that different kind of deserializers are needed depending\non what the Content-Type of the request is:</p>\n<blockquote>\n<div><ul class=\"simple\">\n<li>A <tt class=\"docutils literal\"><span class=\"pre\">application/x-www-form-urlencoded</span></tt> encoded field needs an implicit <tt class=\"docutils literal\"><span class=\"pre\">Deserializer[Option[String],</span> <span class=\"pre\">T]</span></tt></li>\n<li>A <tt class=\"docutils literal\"><span class=\"pre\">multipart/form-data</span></tt> encoded field needs an implicit <tt class=\"docutils literal\"><span class=\"pre\">Deserializer[Option[BodyPart],</span> <span class=\"pre\">T]</span></tt></li>\n</ul>\n</div></blockquote>\n<p>For common data-types, these implicits are predefined so that you usually don&#8217;t need to care. For custom data-types it\nshould usually suffice to create a <tt class=\"docutils literal\"><span class=\"pre\">Deserializer[String,</span> <span class=\"pre\">T]</span></tt> if the value will be encoded as a <tt class=\"docutils literal\"><span class=\"pre\">String</span></tt>.\nThis should be valid for all values generated by HTML forms apart from file uploads.</p>\n<div class=\"section\" id=\"details\">\n<h3>Details</h3>\n<p>It should only be necessary to read and understand this paragraph if you have very special needs and need to process\narbitrary forms, especially ones not generated by HTML forms.</p>\n<p>The <tt class=\"docutils literal\"><span class=\"pre\">formFields</span></tt> directive contains this logic to find and decide how to deserialize a POSTed form field:</p>\n<blockquote>\n<div><ul class=\"simple\">\n<li>It tries to find implicits of both types at the definition site if possible or otherwise at least one of both. If\nnone is available compilation will fail with an &#8220;implicit not found&#8221; error.</li>\n<li>Depending on the <tt class=\"docutils literal\"><span class=\"pre\">Content-Type</span></tt> of the incoming request it first tries the matching (see above) one if available.</li>\n<li>If only a <tt class=\"docutils literal\"><span class=\"pre\">Deserializer[Option[String],</span> <span class=\"pre\">T]</span></tt> is available when a request of type <tt class=\"docutils literal\"><span class=\"pre\">multipart/form-data</span></tt> is\nreceived, this deserializer will be tried to deserialize the body part for a field if the entity is of type\n<tt class=\"docutils literal\"><span class=\"pre\">text/plain</span></tt> or unspecified.</li>\n<li>If only a <tt class=\"docutils literal\"><span class=\"pre\">Deserializer[Option[BodyPart],</span> <span class=\"pre\">T]</span></tt> is available when a request of type\n<tt class=\"docutils literal\"><span class=\"pre\">application/x-www-form-urlencoded</span></tt> is received, this deserializer will be tried to deserialize the field value by\npacking the field value into a body part with an entity of type <tt class=\"docutils literal\"><span class=\"pre\">text/plain</span></tt>. Deserializing will only succeed if\nthe deserializer accepts entities of type <tt class=\"docutils literal\"><span class=\"pre\">text/plain</span></tt>.</li>\n</ul>\n</div></blockquote>\n<p>If you need to handle encoded fields of a <tt class=\"docutils literal\"><span class=\"pre\">multipart/form-data</span></tt>-encoded request for a custom type, you therefore need\nto provide a <tt class=\"docutils literal\"><span class=\"pre\">Deserializer[Option[BodyPart],</span> <span class=\"pre\">T]</span></tt>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"example\">\n<h2>Example</h2>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">val</span> <span class=\"n\">route</span> <span class=\"k\">=</span>\n  <span class=\"n\">formFields</span><span class=\"o\">(</span><span class=\"-Symbol\">&#39;color</span><span class=\"o\">,</span> <span class=\"-Symbol\">&#39;age</span><span class=\"o\">.</span><span class=\"n\">as</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">])</span> <span class=\"o\">{</span> <span class=\"o\">(</span><span class=\"n\">color</span><span class=\"o\">,</span> <span class=\"n\">age</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span>\n    <span class=\"n\">complete</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"s\">&quot;The color is &#39;$color&#39; and the age ten years ago was ${age - 10}&quot;</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n\n<span class=\"nc\">Post</span><span class=\"o\">(</span><span class=\"s\">&quot;/&quot;</span><span class=\"o\">,</span> <span class=\"nc\">FormData</span><span class=\"o\">(</span><span class=\"nc\">Seq</span><span class=\"o\">(</span><span class=\"s\">&quot;color&quot;</span> <span class=\"o\">-&gt;</span> <span class=\"s\">&quot;blue&quot;</span><span class=\"o\">,</span> <span class=\"s\">&quot;age&quot;</span> <span class=\"o\">-&gt;</span> <span class=\"s\">&quot;68&quot;</span><span class=\"o\">)))</span> <span class=\"o\">~&gt;</span> <span class=\"n\">route</span> <span class=\"o\">~&gt;</span> <span class=\"n\">check</span> <span class=\"o\">{</span>\n  <span class=\"n\">responseAs</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">]</span> <span class=\"o\">===</span> <span class=\"s\">&quot;The color is &#39;blue&#39; and the age ten years ago was 58&quot;</span>\n<span class=\"o\">}</span>\n\n<span class=\"nc\">Get</span><span class=\"o\">(</span><span class=\"s\">&quot;/&quot;</span><span class=\"o\">)</span> <span class=\"o\">~&gt;</span> <span class=\"n\">sealRoute</span><span class=\"o\">(</span><span class=\"n\">route</span><span class=\"o\">)</span> <span class=\"o\">~&gt;</span> <span class=\"n\">check</span> <span class=\"o\">{</span>\n  <span class=\"n\">status</span> <span class=\"o\">===</span> <span class=\"nc\">StatusCodes</span><span class=\"o\">.</span><span class=\"nc\">BadRequest</span>\n  <span class=\"n\">responseAs</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">]</span> <span class=\"o\">===</span> <span class=\"s\">&quot;Request is missing required form field &#39;color&#39;&quot;</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n<p>For more examples about the way how fields can specified see the examples for the <tt class=\"docutils literal\"><span class=\"pre\">parameters</span></tt> directive.</p>\n</div>\n</div>\n", "display_toc": true, "title": "formFields", "sourcename": "", "customsidebar": null, "current_page_name": "documentation/spray-routing/form-field-directives/formFields", "next": {"link": "../../future-directives/", "title": "FuturesDirectives"}, "rellinks": [["genindex", "General Index", "I", "index"], ["documentation/spray-routing/future-directives/index", "FuturesDirectives", "N", "next"], ["documentation/spray-routing/form-field-directives/formField", "formField", "P", "previous"]], "meta": {}, "parents": [{"link": "../../../", "title": "Documentation"}, {"link": "../../", "title": "spray-routing"}, {"link": "../../predefined-directives-by-trait/", "title": "Predefined Directives (by trait)"}, {"link": "../", "title": "FormFieldDirectives"}], "sidebars": null, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">formFields</a><ul>\n<li><a class=\"reference internal\" href=\"#signature\">Signature</a></li>\n<li><a class=\"reference internal\" href=\"#description\">Description</a></li>\n<li><a class=\"reference internal\" href=\"#unmarshalling\">Unmarshalling</a><ul>\n<li><a class=\"reference internal\" href=\"#details\">Details</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#example\">Example</a></li>\n</ul>\n</li>\n</ul>\n", "prev": {"link": "../formField/", "title": "formField"}, "metatags": ""}